datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Technician {
  id           String  @id @default(uuid())
  technicianId String  @unique
  firstName    String? @db.Text
  email        String  @unique

  tags      Tag[]
  customers Customer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// When a Tag is created this is the customer that is created
model Customer {
  id              String     @id @default(uuid())
  customerId      String     @unique
  businessName    String     @db.Text
  address         String
  city            String?
  // Tags associated with this customer
  tags            Tag[]
  // Technician that created this customer
  technicianId    String
  technician      Technician @relation(fields: [technicianId], references: [id])
  // Info (provided by Technician) - optional
  contactName     String?
  contactEmail    String?
  contactPhone    String?
  technicianNotes String?
  // timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?

  // indexes
  @@index([technicianId])
}

// When a tag is created a customer is created 
model Tag {
  id             String     @id @default(uuid())
  tagId          String     @unique
  // Technician who created this tag
  technicianId   String
  technician     Technician @relation(fields: [technicianId], references: [id])
  // Customer this tag is associated with
  customerId     String?
  customer       Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  // These are the details found on a tag (provided by Technician)
  // Tag Info:
  name           String     @db.Text
  type           String
  location       String
  expirationDate DateTime?
  serial         String
  rating         String

  // photos:
  frontTagSrc String
  backTagSrc  String?

  // Notification:
  notification Notification[]
  // timestamps:
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  @@index([technicianId])
  @@index([customerId])
}

// Notification model for sending notifications to technicians
model Notification {
  id    String @id @default(uuid())
  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  // Notification Info:
  title String
  body  String

  status   String
  sendDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tagId])
}
